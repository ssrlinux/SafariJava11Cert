Q) Which are legal:
A) class X {
     var x = 99;
   }

B) void doStuff(var x) { }

C) void doStuff() {
     var x;
     x = 100;
   }

D) void doStuff() {
     var x = 100;
   }

E) void doStuff() {
     var x = { 1, 2, 3 };
   }

Q) Which are legal:
A) void doStuff() {
 var [] x = new int[]{ 1, 2, 3 };
}
B) void doStuff() {
 var x = 1, y = 2;
}
C) void doStuff() {
 try {
  // stuff happens
  } catch (var ex) {
  }
}
D) try (var in = new FileReader("");
     var out = new FileWriter("")) {
}
E) var var = "var";

Q) Which are legal:
A) { int x; }
  { int x; }
B) class X {
    { sout(x); }
    int x;
  }
C) {
    int x;
    { int x; }
  }
D) {
    int x;
    Predicate<String> ps = x -> true;
  }
E) for (int x = 0; x < 10; x++)
    ;
   int x;

Q)   Which print "true"
A) String s = "Hello";
  String t = "He";
  t += "llo";
  sout(s == t);
B) String s = "Hello";
  String t = "He";
  t += "llo";
  sout(s.equals(t));
C) StringBuilder s = new StringBuilder("Hello");
  StringBuilder t = new StringBuilder("He");
  t.append("llo");
  sout(s.equals(t));
D) List<String> ls = List.of("Fred", "Jim");
  List<String> ls2 = new ArrayList<>(ls);
  sout(ls.equals(ls2));
E) LocalDate ld = LocalDate.of(2021, 3, 29);
  LocalDate ld2 = LocalDate.of(2021, 3, 29);
  sout(ld.equals(ld2));

Q) Which are valid?
A) int x = 99;
switch (x) {
 // cases
}

B) long y = 100;
switch (y) {
 // cases
}

C) Day d = Day.MONDAY;
switch (d) {
 case MONDAY:
}

D) switch (d) {
 case Day.MONDAY:
}

Q)
Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here { /*handle both exceptions */ }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given
 void doStuff() throws SQLException {};
 void doStuff2() throws FileNotFoundException {};
And:
 void tryStuff() ...insert here... {
   try {
     doStuff();
     doStuff2();
   } catch (SQLException | FileNotFoundException e) {
     throw e;
   }
 }
What is best at "...insert here..."?
A) throws Exception
B) throws SQLException
C) throws FileNotFoundException
D) throws FileNotFoundException, SQLException
E) nothing is needed, compilation succeeds as is

Q) Given:
   var fr = new FileReader("main.txt");
   try (
        // line n1
       ){
     BufferedReader br = new BufferedReader(fr);
     String line;
     while ((line = br.readLine()) != null)
       System.out.println(">> " + line);
   }
   fr = null;

What should be added at line n1 for successful compilation?
A) fr;
B) final fr;
C) var fr2 = fr;
D) This cannot be achieved with change restricted to line n1

Q) Given:
class X {
  static int x = 99;
}
class Y extends X {
  int x = 100;
  void doStuff() {
    sout(x);
  }
  static void doMore(int x) { new Y.doStuff(); }
  psvm { doMore(98); }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) 98
D) 99
E) 100

Q) Given:
void doStuff(int x, int y) {}         // Method A
void doStuff(int x, long y) {}        // Method B
void doStuff(long x, int y) {}        // Method C
void doStuff(int ... x) {}            // Method D
void doStuff(Integer x, Integer y) {} // Method E

void tryStuff() {
    doStuff(1, 2);
}

What happens if method A is deleted?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q) Given:
   abstract class Concept {
     abstract String name;
     abstract void doStuff();
   }
Which are true:
A) deleting the method doStuff() would cause a compilation error
B) deleting the name field would cause a compilation error
C) adding a constructor would cause a compilation error
D) adding a static method would cause a compilation error
E) the code fails to compile

Q) Given
abstract final class Concept2 {
 abstract void doStuff();
 default void doMoreStuff() {}
 private Concept2() {}
}

Which are true individually?
A) the code compiles successfully
B) removing the private modifier from the constructor is necessary for the
   code to compile
C) removing the declaration of doStuff is sufficient for the code to compile
D) removing the keyword default is sufficient for the code to compile
E) removing the final keyword is necessary for the code to compile

Q) Given:
abstract class Concept3 {
 abstract void doStuff();
 void doMoreStuff() {}
 protected Concept3() {}
}

class Concrete extends Concept3 implements Serializable {
}

Which are true?
A) Concept3 fails to compile
B) Concrete compiles successfully
C) adding this method is necessary to permit Concrete to compile:
   void doStuff(){}
D) adding this method is necessary to permit Concrete to compile:
   void serializeObject(ObjectOutputStream oos) {}
E) adding this method is necessary to permit Concrete to compile:
   public void serializeObject(ObjectOutputStream oos) {}

Q) Given:
interface Int1 {
 default void doStuff() {
   System.out.println("Int1.doStuff()");
 }
}
class Cl1 implements Int1 {
 void doStuff() {
   System.out.println("Cl1.doStuff");
 }
}
What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
  Cl1.doStuff()